// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  password     String
  name         String
  creationDate DateTime
  isAuthor     Boolean?

  posts     Post[]
  comments  Comment[]
  upvotes   Upvote[]
  downvotes Downvote[]

  @@map("users")
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  creationDate DateTime
  published    Boolean

  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  upvotes   Upvote[]
  downvotes Downvote[]

  @@map("posts")
}

model Comment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  creationDate DateTime

  postId String? @db.ObjectId
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  upvotes   Upvote[]
  downvotes Downvote[]

  parentId String?   @db.ObjectId
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")

  isDeleted Boolean?

  @@index([postId])
  @@map("comments")
}

model Upvote {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  commentId String? @db.ObjectId
  postId    String? @db.ObjectId

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post?    @relation(fields: [postId], references: [id])

  @@unique([userId, commentId]) // A user can only upvote a comment once
  @@unique([userId, postId])
  @@map("upvotes")
}

model Downvote {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  commentId String? @db.ObjectId
  postId    String? @db.ObjectId

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post?    @relation(fields: [postId], references: [id])

  @@unique([userId, commentId]) // A user can only downvote a comment once
  @@unique([userId, postId])
  @@map("downvotes")
}
